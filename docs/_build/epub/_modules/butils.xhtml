<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>butils</title>
    <link rel="stylesheet" href="../_static/epub.css" type="text/css" />
    <link rel="stylesheet" href="../_static/pygments.css" type="text/css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <h1>Source code for butils</h1><div class="highlight"><pre>
<span></span><span class="kn">import</span> <span class="nn">os</span>
<span class="kn">import</span> <span class="nn">shutil</span>
<span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span>
<span class="kn">from</span> <span class="nn">subprocess</span> <span class="k">import</span> <span class="n">PIPE</span><span class="p">,</span> <span class="n">Popen</span>
<span class="kn">from</span> <span class="nn">PIL</span> <span class="k">import</span> <span class="n">Image</span>
<span class="kn">import</span> <span class="nn">imageio</span>
<span class="kn">import</span> <span class="nn">sys</span>


<div class="viewcode-block" id="makeGIF"><a class="viewcode-back" href="../index.xhtml#butils.makeGIF">[docs]</a><span class="k">def</span> <span class="nf">makeGIF</span><span class="p">(</span><span class="n">runfolder</span><span class="p">,</span> <span class="n">prefix</span><span class="o">=</span><span class="s1">&#39;&#39;</span><span class="p">,</span> <span class="n">subf</span><span class="o">=</span><span class="s1">&#39;&#39;</span><span class="p">,</span> <span class="n">speed</span><span class="o">=</span><span class="mf">0.2</span><span class="p">):</span>
    <span class="sd">&quot;&quot;&quot;Join all png images within a folder in an animated .gif</span>

<span class="sd">    Args:</span>
<span class="sd">        runfolder (str): folder path</span>
<span class="sd">        prefix (str): prefix for files</span>
<span class="sd">        subf (str): subfolder for files</span>
<span class="sd">        speed (float): seconds between frames</span>
<span class="sd">    &quot;&quot;&quot;</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">subf</span><span class="p">:</span>
        <span class="n">prepath</span> <span class="o">=</span> <span class="n">runfolder</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="n">prepath</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">runfolder</span><span class="p">,</span> <span class="s2">&quot;png&quot;</span><span class="p">,</span> <span class="n">subf</span><span class="p">)</span>
    <span class="n">finns</span> <span class="o">=</span> <span class="nb">sorted</span><span class="p">([</span><span class="n">i</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">os</span><span class="o">.</span><span class="n">listdir</span><span class="p">(</span><span class="n">prepath</span><span class="p">)</span> <span class="k">if</span> <span class="n">prefix</span> <span class="ow">in</span> <span class="n">i</span><span class="p">])</span>
    <span class="n">finns</span> <span class="o">=</span> <span class="p">[</span><span class="n">x</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">finns</span> <span class="k">if</span> <span class="s1">&#39;.png&#39;</span> <span class="ow">in</span> <span class="n">x</span><span class="p">]</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">prefix</span><span class="p">:</span>
        <span class="n">prefix</span> <span class="o">=</span> <span class="n">subf</span>
    <span class="c1"># image resize</span>
    <span class="c1">#    for finn in finns:</span>
    <span class="c1">#        name, ext = os.path.splitext(finn)</span>
    <span class="c1">#        im = Image.open(finn)</span>
    <span class="c1">#        im.thumbnail(size)</span>
    <span class="c1">#        im.save(name + &quot;.resized.png&quot;, &quot;png&quot;)</span>
    <span class="n">jakes</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">finn</span> <span class="ow">in</span> <span class="n">finns</span><span class="p">:</span>
        <span class="n">sys</span><span class="o">.</span><span class="n">stdout</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">finn</span> <span class="o">+</span> <span class="s2">&quot; &quot;</span><span class="p">)</span>
        <span class="n">jakes</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">imageio</span><span class="o">.</span><span class="n">imread</span><span class="p">(</span><span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">prepath</span><span class="p">,</span><span class="n">finn</span><span class="p">)))</span>
    <span class="k">if</span> <span class="n">prefix</span><span class="p">:</span>
        <span class="n">expname</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="si">{}</span><span class="s2">/</span><span class="si">{}</span><span class="s2">.gif&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">runfolder</span><span class="p">,</span> <span class="n">prefix</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="n">expname</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="si">{}</span><span class="s2">/joined.gif&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">runfolder</span><span class="p">,</span> <span class="n">prefix</span><span class="p">)</span>
    <span class="n">imageio</span><span class="o">.</span><span class="n">mimsave</span><span class="p">(</span><span class="n">expname</span><span class="p">,</span> <span class="n">jakes</span><span class="p">,</span> <span class="nb">format</span><span class="o">=</span><span class="s1">&#39;gif&#39;</span><span class="p">,</span> <span class="n">duration</span><span class="o">=</span><span class="n">speed</span><span class="p">)</span>
    <span class="nb">print</span> <span class="s2">&quot;</span><span class="se">\n\t</span><span class="s2">Saved: </span><span class="si">{}</span><span class="s2">&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">expname</span><span class="p">)</span></div>


<div class="viewcode-block" id="fortParse"><a class="viewcode-back" href="../index.xhtml#butils.fortParse">[docs]</a><span class="k">def</span> <span class="nf">fortParse</span><span class="p">(</span><span class="n">arg</span><span class="p">):</span>
    <span class="sd">&quot;&quot;&quot;returns a parsed variable from a parameter (bool,</span>
<span class="sd">    str, or number)</span>

<span class="sd">    Args:</span>
<span class="sd">        arg (str): parameter value</span>

<span class="sd">    Returns:</span>
<span class="sd">        str: decorated argument for fortran parsing.</span>

<span class="sd">    &quot;&quot;&quot;</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">val</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">float</span><span class="p">(</span><span class="n">arg</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s1">&#39;d&#39;</span><span class="p">,</span><span class="s1">&#39;E&#39;</span><span class="p">))</span>
        <span class="k">return</span> <span class="n">arg</span>
    <span class="k">except</span> <span class="ne">ValueError</span><span class="p">:</span>
        <span class="k">if</span> <span class="s1">&#39;.true.&#39;</span> <span class="ow">in</span> <span class="n">arg</span><span class="o">.</span><span class="n">lower</span><span class="p">():</span>
            <span class="k">return</span> <span class="n">arg</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span>
        <span class="k">elif</span> <span class="s1">&#39;.false.&#39;</span> <span class="ow">in</span> <span class="n">arg</span><span class="o">.</span><span class="n">lower</span><span class="p">():</span>
            <span class="k">return</span> <span class="n">arg</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">return</span> <span class="s1">&#39;&quot;</span><span class="si">{}</span><span class="s1">&quot;&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">arg</span><span class="o">.</span><span class="n">strip</span><span class="p">(</span><span class="s1">&#39;&quot;</span><span class="se">\&#39;</span><span class="s1"> &#39;</span><span class="p">))</span></div>


<div class="viewcode-block" id="execute"><a class="viewcode-back" href="../index.xhtml#butils.execute">[docs]</a><span class="k">def</span> <span class="nf">execute</span><span class="p">(</span><span class="n">outpath</span><span class="p">):</span>
    <span class="sd">&quot;&quot;&quot;qsubs the sumbit.pbs at outpath</span>

<span class="sd">    Args:</span>
<span class="sd">        outpath (str): runfolder</span>

<span class="sd">    Returns:</span>
<span class="sd">        (tuple): STDOUT, STDERR, ERRCODE</span>

<span class="sd">    &quot;&quot;&quot;</span>
    <span class="n">command</span> <span class="o">=</span> <span class="s1">&#39;qsub submit.pbs&#39;</span>
    <span class="n">p</span> <span class="o">=</span> <span class="n">Popen</span><span class="p">(</span><span class="n">command</span><span class="o">.</span><span class="n">split</span><span class="p">(),</span> <span class="n">cwd</span><span class="o">=</span><span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">abspath</span><span class="p">(</span><span class="n">outpath</span><span class="p">),</span>
              <span class="n">stdin</span><span class="o">=</span><span class="n">PIPE</span><span class="p">,</span> <span class="n">stdout</span><span class="o">=</span><span class="n">PIPE</span><span class="p">,</span> <span class="n">stderr</span><span class="o">=</span><span class="n">PIPE</span><span class="p">)</span>
    <span class="n">r</span><span class="p">,</span> <span class="n">e</span> <span class="o">=</span> <span class="n">p</span><span class="o">.</span><span class="n">communicate</span><span class="p">()</span>
    <span class="n">exitcode</span> <span class="o">=</span> <span class="n">p</span><span class="o">.</span><span class="n">returncode</span>
    <span class="k">return</span> <span class="n">r</span><span class="p">,</span> <span class="n">e</span><span class="p">,</span> <span class="n">exitcode</span></div>


<span class="k">def</span> <span class="nf">cpList</span><span class="p">(</span><span class="n">files</span><span class="p">,</span> <span class="n">src</span><span class="p">,</span> <span class="n">dst</span><span class="p">):</span>
    <span class="k">for</span> <span class="n">f</span> <span class="ow">in</span> <span class="n">files</span><span class="p">:</span>
        <span class="n">shutil</span><span class="o">.</span><span class="n">copy</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">([</span><span class="n">src</span><span class="p">,</span><span class="n">f</span><span class="p">]),</span> <span class="s1">&#39;/&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">([</span><span class="n">dst</span><span class="p">,</span><span class="n">f</span><span class="p">]))</span>


<div class="viewcode-block" id="writeSubmit"><a class="viewcode-back" href="../index.xhtml#butils.writeSubmit">[docs]</a><span class="k">def</span> <span class="nf">writeSubmit</span><span class="p">(</span><span class="n">subfile</span><span class="p">,</span> <span class="n">code</span><span class="p">,</span> <span class="n">pbsins</span><span class="o">=</span><span class="p">[],</span>
                <span class="n">time</span><span class="o">=</span><span class="s1">&#39;12:00:00&#39;</span><span class="p">,</span> <span class="n">nodes</span><span class="o">=</span><span class="mi">1252</span><span class="p">,</span> <span class="n">ompth</span><span class="o">=</span><span class="mi">16</span><span class="p">,</span> <span class="n">proj</span><span class="o">=</span><span class="s1">&#39;&#39;</span><span class="p">,</span> <span class="n">mail</span><span class="o">=</span><span class="s1">&#39;&#39;</span><span class="p">):</span>
    <span class="sd">&quot;&quot;&quot;builds a submit.pbs with a typical header, specifying walltime and nodes,</span>
<span class="sd">    then adding slines of code below. Exports OMP_NUM_THREADS=ompth</span>
<span class="sd">    titan: aprun (-j1) -n 1 -d 16</span>
<span class="sd">    debug: -D (int)</span>
<span class="sd">    rhea: mpirun --map-by ppr:N:node:pe=Th or -n</span>
<span class="sd">    debug: --display-map / --report-bindings</span>
<span class="sd">    Rhea max: 48 hours on 16 nodes (2x8 core p/node: -np 256)</span>
<span class="sd">    Titan: &lt;125 nodes 2h, &lt;312 nodes 6h...</span>
<span class="sd">    &quot;&quot;&quot;</span>
    <span class="n">subHeader</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="n">subHeader</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s1">&#39;#!/bin/bash&#39;</span><span class="p">)</span>
    <span class="n">subHeader</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s1">&#39;#PBS -V&#39;</span><span class="p">)</span> <span class="c1"># pass env vars to nodes</span>
    <span class="c1">#subHeader.append(&#39;#PBS -j oe&#39;) # join err and otp</span>
    <span class="n">subHeader</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s1">&#39;#PBS -l gres=atlas1&#39;</span><span class="p">)</span>
    <span class="n">subHeader</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s1">&#39;#PBS -A </span><span class="si">{}</span><span class="s1">&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">proj</span><span class="p">))</span>
    <span class="n">subHeader</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s1">&#39;#PBS -l walltime=</span><span class="si">{}</span><span class="s1">,nodes=</span><span class="si">{}</span><span class="s1">&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">time</span><span class="p">,</span> <span class="n">nodes</span><span class="p">))</span>
    <span class="n">subHeader</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s1">&#39;#PBS -N </span><span class="si">{}</span><span class="s1">&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">basename</span><span class="p">(</span><span class="n">subfile</span><span class="p">)[:</span><span class="o">-</span><span class="mi">4</span><span class="p">]))</span>
    <span class="n">subHeader</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s1">&#39;#PBS -j oe&#39;</span><span class="p">)</span>
    <span class="n">subScript</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="n">subScript</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s1">&#39;date&#39;</span><span class="p">)</span>
    <span class="n">subScript</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s1">&#39;echo Submitted from: $PBS_O_WORKDIR&#39;</span><span class="p">)</span>
    <span class="n">subScript</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s1">&#39;echo #####################&#39;</span><span class="p">)</span>
    <span class="n">subScript</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s1">&#39;export OMP_NUM_THREADS=</span><span class="si">{}</span><span class="s1">&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="n">ompth</span><span class="p">)))</span>
    <span class="n">subScript</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s1">&#39;export CRAY_CUDA_MPS=1&#39;</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">mail</span><span class="p">:</span>
        <span class="n">subHeader</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s1">&#39;#PBS -M </span><span class="si">{}</span><span class="s1">&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">mail</span><span class="p">))</span>
        <span class="n">subHeader</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s1">&#39;#PBS -m abe&#39;</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">pbsins</span><span class="p">:</span>
        <span class="n">subHeader</span> <span class="o">=</span> <span class="n">subHeader</span> <span class="o">+</span> <span class="n">pbsins</span>
    <span class="n">subScript</span> <span class="o">=</span> <span class="n">subScript</span> <span class="o">+</span> <span class="n">code</span>
    <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">subfile</span><span class="p">,</span> <span class="s1">&#39;w&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">o</span><span class="p">:</span>
        <span class="n">o</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">subHeader</span><span class="p">))</span>
        <span class="n">o</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">)</span>
        <span class="n">o</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">subScript</span><span class="p">))</span>
        <span class="n">o</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">)</span></div>


<div class="viewcode-block" id="probeFile"><a class="viewcode-back" href="../index.xhtml#butils.probeFile">[docs]</a><span class="k">def</span> <span class="nf">probeFile</span><span class="p">(</span><span class="n">file</span><span class="p">,</span> <span class="n">showrows</span><span class="o">=</span><span class="mi">3</span><span class="p">):</span>
    <span class="sd">&quot;&quot;&quot;Shows &#39;showrows&#39; lines from the start, midfile and</span>
<span class="sd">    ending of a plaintext file</span>
<span class="sd">    &quot;&quot;&quot;</span>
    <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">file</span><span class="p">,</span> <span class="s1">&#39;r&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
        <span class="n">lines</span> <span class="o">=</span> <span class="n">f</span><span class="o">.</span><span class="n">readlines</span><span class="p">()</span>
    <span class="n">l</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">lines</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">l</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="p">:</span>
        <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">lines</span><span class="p">))</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="n">l2</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">l</span><span class="o">/</span><span class="mf">2.</span><span class="p">)</span>
        <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">lines</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="n">showrows</span><span class="p">]))</span>
        <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">lines</span><span class="p">[</span><span class="n">l2</span><span class="p">:</span><span class="n">l2</span><span class="o">+</span><span class="n">showrows</span><span class="p">]))</span>
        <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">lines</span><span class="p">[</span><span class="o">-</span><span class="n">showrows</span><span class="p">:]))</span></div>


<div class="viewcode-block" id="emptyFileTree"><a class="viewcode-back" href="../index.xhtml#butils.emptyFileTree">[docs]</a><span class="k">def</span> <span class="nf">emptyFileTree</span><span class="p">(</span><span class="n">root</span><span class="p">):</span>
    <span class="sd">&quot;&quot;&quot;Empties &#39;root&#39; folder.&quot;&quot;&quot;</span>
    <span class="n">path</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">abspath</span><span class="p">(</span><span class="n">root</span><span class="p">)</span>
    <span class="n">shutil</span><span class="o">.</span><span class="n">rmtree</span><span class="p">(</span><span class="n">path</span><span class="p">)</span>
    <span class="n">os</span><span class="o">.</span><span class="n">makedirs</span><span class="p">(</span><span class="n">path</span><span class="p">)</span></div>
    
</pre></div>

          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>