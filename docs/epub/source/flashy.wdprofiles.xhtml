<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>flashy.wdprofiles package</title>
    <link rel="stylesheet" href="../_static/epub.css" type="text/css" />
    <link rel="stylesheet" href="../_static/pygments.css" type="text/css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <div class="section" id="flashy-wdprofiles-package">
<h1>flashy.wdprofiles package</h1>
<div class="section" id="submodules">
<h2>Submodules</h2>
</div>
<div class="section" id="module-flashy.wdprofiles.coldFermi">
<span id="flashy-wdprofiles-coldfermi-module"></span><h2>flashy.wdprofiles.coldFermi module</h2>
<p>Fermi eos wd profiles, adapted from Timmes public cowd code.
20180430: Helmholtz Eos added for temperature. Composition can also change</p>
<p>TDL: apply min dens criteria.</p>
<dl class="function">
<dt id="flashy.wdprofiles.coldFermi.buildFermiHelmhotz">
<code class="descclassname">flashy.wdprofiles.coldFermi.</code><code class="descname">buildFermiHelmhotz</code><span class="sig-paren">(</span><em>denc</em>, <em>xmass</em>, <em>species</em>, <em>pdens=0</em>, <em>hack=False</em><span class="sig-paren">)</span></dt>
<dd><p>Solves an IVP for a completely degenerate Fermi gas under hydrostatic equilibrium,
then uses a Helmholtz EoS to assign a temperature value to the profile (this is somewhat
wrong but better than guessing or putting an average).
WARN: for high densities (over 1e8), helmholtz temp breaks
(reaches minimum 1e4 K and ‘bounces’).
WARN: pdens maxes around 600 points, beyond that the helmholtz package breaks.</p>
<dl class="field-list simple">
<dt class="field-odd">Parameters</dt>
<dd class="field-odd"><ul class="simple">
<li><p><strong>denc</strong> (<em>float</em>) – initial central density.</p></li>
<li><p><strong>xmass</strong> (<em>float list</em>) – mass fractions for the used species.</p></li>
<li><p><strong>species</strong> (<em>str list</em>) – nuclide code for each species.</p></li>
<li><p><strong>pdens</strong> (<em>int</em>) – force a set number of points in the output (WARNING: runs ivp twice).</p></li>
<li><p><strong>hack</strong> (<em>bool</em>) – avoid helmholtz temperature and return a ‘weighted’ fermi temperature.</p></li>
</ul>
</dd>
<dt class="field-even">Returns</dt>
<dd class="field-even"><p>tabbable profile object.</p>
</dd>
<dt class="field-odd">Return type</dt>
<dd class="field-odd"><p>(<a class="reference internal" href="flashy.datahaul.xhtml#flashy.datahaul.plainText.dataMatrix" title="flashy.datahaul.plainText.dataMatrix">dataMatrix</a>)</p>
</dd>
</dl>
</dd></dl>

<dl class="function">
<dt id="flashy.wdprofiles.coldFermi.buildFermiProfile">
<code class="descclassname">flashy.wdprofiles.coldFermi.</code><code class="descname">buildFermiProfile</code><span class="sig-paren">(</span><em>denc</em>, <em>ye=0.5</em>, <em>start=10000.0</em>, <em>stop=10000000000.0</em>, <em>pdens=400</em><span class="sig-paren">)</span></dt>
<dd><p>Solves an IVP for a completely degenerate Fermi gas under hydrostatic equilibrium.</p>
<dl class="field-list simple">
<dt class="field-odd">Parameters</dt>
<dd class="field-odd"><ul class="simple">
<li><p><strong>denc</strong> (<em>float</em>) – initial central density.</p></li>
<li><p><strong>ye</strong> (<em>float</em>) – electron fraction.</p></li>
<li><p><strong>start</strong> (<em>float</em>) – initial radius (minimum radius).</p></li>
<li><p><strong>stop</strong> (<em>float</em>) – ivp solver stopping radius.</p></li>
<li><p><strong>pdens</strong> (<em>int</em>) – points/2 to evaulate. (uses other half for edge)</p></li>
</ul>
</dd>
<dt class="field-even">Returns</dt>
<dd class="field-even"><p>radii
(float list): masses
(float list): densities
(float list): pressures</p>
</dd>
<dt class="field-odd">Return type</dt>
<dd class="field-odd"><p>(float list)</p>
</dd>
</dl>
</dd></dl>

<dl class="function">
<dt id="flashy.wdprofiles.coldFermi.derv">
<code class="descclassname">flashy.wdprofiles.coldFermi.</code><code class="descname">derv</code><span class="sig-paren">(</span><em>x</em>, <em>y</em>, <em>denc=1000000000.0</em>, <em>ye=0.5</em>, <em>genrel=True</em><span class="sig-paren">)</span></dt>
<dd></dd></dl>

<dl class="function">
<dt id="flashy.wdprofiles.coldFermi.fergas">
<code class="descclassname">flashy.wdprofiles.coldFermi.</code><code class="descname">fergas</code><span class="sig-paren">(</span><em>den</em>, <em>ye</em><span class="sig-paren">)</span></dt>
<dd><p>the eos for a cold fermi gas
see, for example, cox &amp; guili equation 24.157 or chandra chapter 10, eq. 19-20</p>
<p>input is the density den and the mean charge to mean weight ratio ye.
output is the pressure (in erg/cm**3), the pressure derivative with density,
the energy (in erg/g), and the energy derivative with density.</p>
</dd></dl>

<dl class="function">
<dt id="flashy.wdprofiles.coldFermi.invert_fergas">
<code class="descclassname">flashy.wdprofiles.coldFermi.</code><code class="descname">invert_fergas</code><span class="sig-paren">(</span><em>den</em>, <em>pres</em>, <em>ye</em><span class="sig-paren">)</span></dt>
<dd><p>given the pressure, ye, and a guess for the density,
find the density and dpdd</p>
</dd></dl>

<dl class="function">
<dt id="flashy.wdprofiles.coldFermi.jac">
<code class="descclassname">flashy.wdprofiles.coldFermi.</code><code class="descname">jac</code><span class="sig-paren">(</span><em>x</em>, <em>y</em>, <em>denc=1000000000.0</em><span class="sig-paren">)</span></dt>
<dd></dd></dl>

<dl class="function">
<dt id="flashy.wdprofiles.coldFermi.setBC">
<code class="descclassname">flashy.wdprofiles.coldFermi.</code><code class="descname">setBC</code><span class="sig-paren">(</span><em>dens</em>, <em>ye=0.5</em>, <em>start=10000.0</em><span class="sig-paren">)</span></dt>
<dd></dd></dl>

</div>
<div class="section" id="module-flashy.wdprofiles.polytropes">
<span id="flashy-wdprofiles-polytropes-module"></span><h2>flashy.wdprofiles.polytropes module</h2>
<p>Polytropic profiles, Helmholtz temperature based on composition.</p>
<dl class="function">
<dt id="flashy.wdprofiles.polytropes.athens">
<code class="descclassname">flashy.wdprofiles.polytropes.</code><code class="descname">athens</code><span class="sig-paren">(</span><em>t</em>, <em>y</em><span class="sig-paren">)</span></dt>
<dd></dd></dl>

<dl class="function">
<dt id="flashy.wdprofiles.polytropes.buildPolytropicHelmholtz">
<code class="descclassname">flashy.wdprofiles.polytropes.</code><code class="descname">buildPolytropicHelmholtz</code><span class="sig-paren">(</span><em>rstart, pc, rhoc, species=['he4'], xmass=[1.0], gamma=1.333, rmax=69570000000.0, mind=1e-05</em><span class="sig-paren">)</span></dt>
<dd><p>Generates a polytropic profile satisfying a given central pressure, density,
and heat capacity ratio (index).
Adds Temperatures based on composition through a Helmholtz free energy EoS.</p>
<dl class="field-list simple">
<dt class="field-odd">Parameters</dt>
<dd class="field-odd"><ul class="simple">
<li><p><strong>rstart</strong> (<em>float</em>) – starting radius for the solution.</p></li>
<li><p><strong>pc</strong> (<em>float</em>) – starting pressure.</p></li>
<li><p><strong>rhoc</strong> (<em>float</em>) – starting density.</p></li>
<li><p><strong>species</strong> (<em>float</em>) – nuclides to include in composition (Helmholtz).</p></li>
<li><p><strong>xmass</strong> (<em>float</em>) – mass fractions for each species (Helmholtz).</p></li>
<li><p><strong>gamma</strong> (<em>float</em>) – polytrope index (1+1/n = gamma).</p></li>
<li><p><strong>rmax</strong> (<em>float</em>) – furthest radius to solve the system.</p></li>
<li><p><strong>mind</strong> (<em>float</em>) – curoff density for generated profile.</p></li>
</ul>
</dd>
<dt class="field-even">Returns</dt>
<dd class="field-even"><p>profile object with properties as attributes.</p>
</dd>
<dt class="field-odd">Return type</dt>
<dd class="field-odd"><p><a class="reference internal" href="flashy.datahaul.xhtml#flashy.datahaul.plainText.dataMatrix" title="flashy.datahaul.plainText.dataMatrix">dataMatrix</a></p>
</dd>
</dl>
</dd></dl>

<dl class="function">
<dt id="flashy.wdprofiles.polytropes.jac">
<code class="descclassname">flashy.wdprofiles.polytropes.</code><code class="descname">jac</code><span class="sig-paren">(</span><em>x</em>, <em>y</em>, <em>pcons</em><span class="sig-paren">)</span></dt>
<dd><p>Jacobian for polyH.</p>
</dd></dl>

<dl class="function">
<dt id="flashy.wdprofiles.polytropes.polyHydro">
<code class="descclassname">flashy.wdprofiles.polytropes.</code><code class="descname">polyHydro</code><span class="sig-paren">(</span><em>x</em>, <em>y</em>, <em>pcons</em><span class="sig-paren">)</span></dt>
<dd><p>Returns the RHS for hydro+mass conservation subject to a
Polytropic EoS</p>
</dd></dl>

<dl class="function">
<dt id="flashy.wdprofiles.polytropes.polydens">
<code class="descclassname">flashy.wdprofiles.polytropes.</code><code class="descname">polydens</code><span class="sig-paren">(</span><em>pres</em>, <em>pcons</em><span class="sig-paren">)</span></dt>
<dd></dd></dl>

</div>
<div class="section" id="module-flashy.wdprofiles">
<span id="module-contents"></span><h2>Module contents</h2>
<p>This module creates approcimate white dwarf profiles for testing and comparison with dynamical models.</p>
</div>
</div>


          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>